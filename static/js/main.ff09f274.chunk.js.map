{"version":3,"sources":["core/constants.js","core/utils.js","core/map.js","core/dungeon.js","reducers/map.js","reducers/screen.js","reducers/effects.js","reducers/sprites.js","reducers/index.js","presenters/Tile.jsx","presenters/TileGrid.jsx","containers/Map.jsx","actions/index.js","presenters/Overlay.jsx","containers/Effects.jsx","presenters/Sprite.jsx","presenters/SpriteSet.jsx","containers/Enemies.jsx","containers/Player.jsx","containers/HealthPacks.jsx","containers/Weapons.jsx","presenters/NavBar.jsx","containers/StatsBar.jsx","containers/Boss.jsx","core/detectSwipe.js","presenters/Roguelike.jsx","core/index.js","containers/Game.jsx","index.js"],"names":["Const","ENEMY_COUNT","HEALTH_COUNT","WEAPON_COUNT","BOSS_COUNT","WIDTH","HEIGHT","UNIT_WIDTH","UNIT_HEIGHT","PLAYER","PLAYER_LEVELS","PLAYER_COUNT","BOSS","BOSS_LEVELS","WEAPON","WEAPON_LEVELS","HEALTH","HEALTH_LEVELS","ENEMY","ENEMY_LEVELS","ENEMY_MAX_HEALTH","random","val","Math","floor","between","min","max","rollXDice","x","sum","i","round","weightedRange","weight","rand","mapTiles","generateMap","width","height","dungeon","dungeoneer","build","get","y","this","tiles","check","type","outOfBounds","get4BitMask","N","E","S","W","get8BitMask","NW","NE","SE","SW","generateDungeon","mask","textureCode","parseInt","texture","orig","neighbours","nesw","getSpawnFromRoom","room","getRandomSpawn","rooms","length","mapInitialState","map","state","action","screenInitialState","top","left","screen","Object","assign","effectsInitialState","fogOn","defeat","victory","blood","effects","value","spriteInitialState","sprite","initialHealth","level","initialPower","id","uuidv4","power","health","maxHealth","name","experience","damage","exp","expGain","newExp","levelReq","console","log","spritesInitialState","sprites","undefined","filter","e","roguelikeApp","combineReducers","Tile","className","TileGrid","rows","curRow","push","key","connect","ownProps","spawnSprite","Overlay","zIndex","style","children","defaultStyle","position","right","bottom","mergedStyle","dispatch","disableBlood","props","refs","backgroundColor","display","alignItems","justifyContent","color","maxWidth","textAlign","setTimeout","bind","backgroundImage","transition","Sprite","opacity","SpriteSet","spriteComponents","idx","NavBar","player","detectSwipe","el","callback","swipedir","startX","startY","distX","distY","startTime","touchsurface","handleswipe","addEventListener","touchobj","changedTouches","pageX","pageY","Date","getTime","preventDefault","abs","Roguelike","handleKeyPress","w","window","d","document","documentElement","g","getElementsByTagName","windowX","innerWidth","clientWidth","windowY","innerHeight","clientHeight","setScreen","centerOn","resetGame","enemy","playerHealth","destroy","addExperience","attackSprite","healTo","setPower","coord","has","battleEnemy","usePotion","upgradeWeapon","handleSprites","moveSprite","direction","movePlayer","which","toggleFog","setupGame","handleSwipe","onresize","centerOnPlayer","StatsBar","Player","HealthPacks","Weapons","Boss","Enemies","Component","getMultipleSpawns","n","spawns","Map","size","spawn","set","values","forEach","game","spawnSprites","maxLevel","count","pop","getState","playerSpawn","Game","slice","destroySprite","setSpriteHealth","setSpritePower","setScreenOffset","setSpritePosition","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ff09f274.chunk.js","sourcesContent":["export default class Const {\n  static WIDTH = 77;\n  static HEIGHT = 37;\n  static UNIT_WIDTH = 16;\n  static UNIT_HEIGHT = 16;\n\n  static PLAYER = 'Player';\n  static PLAYER_LEVELS = 50;\n  static PLAYER_COUNT = 1;\n\n  static BOSS = 'Boss';\n  static BOSS_LEVELS = 10;\n  static BOSS_COUNT = 1;\n\n  static WEAPON = 'Weapon';\n  static WEAPON_LEVELS = 3;\n  static WEAPON_COUNT = 3;\n\n  static HEALTH = 'Health';\n  static HEALTH_LEVELS = 6;\n  static HEALTH_COUNT = 20;\n\n  static ENEMY = 'Enemy';\n  static ENEMY_LEVELS = 9;\n  static ENEMY_COUNT = 40;\n  static ENEMY_MAX_HEALTH = 300;\n\n  static get TOTAL_ENTITIES() {\n    return Const.ENEMY_COUNT + Const.HEALTH_COUNT + Const.WEAPON_COUNT + Const.BOSS_COUNT;\n  }\n  \n}\n\n","export const range = (size, val) => {\n  return Array(size).fill(val);\n}\n\nexport function random(val) {\n  return Math.floor(Math.random() * val);\n}\n\n\nexport function between(min, max) {\n  return random(max - min) + min;\n}\n\nexport function eql(a, b) {\n  if (typeof a === 'undefined' &&\n    typeof b === 'undefined') {\n    return true;\n  }\n  if (typeof a === 'undefined' ||\n    typeof b === 'undefined') {\n    return false;\n  }\n  return a === b;\n}\n\nexport function randomRange(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n\nexport function rollXDice(x) {\n  let sum = 0;\n  for (let i = 0; i < x; i++) {\n    sum += Math.round(randomRange(1, 6));\n  }\n  return sum;\n}\n\nexport function weightedRange(min, max, weight) {\n  if (weight < 1) return;\n  let sum = 0;\n  do {\n    sum = rollXDice(weight);\n    sum -= (3.5 * weight);\n  } while (sum < 0)\n  const rand = sum / 6;\n  return Math.floor(rand * (max - min) + min);\n}\n","import { random, between } from './utils';\nimport generateDungeon from './dungeon'\n\nconst mapTiles = { \"0\": 1, \"1\": 0, \"3\":3,\"4\": 9, \"5\": 9, \"6\": 9, \"7\": 7, \"12\": 9, \"13\": 0, \"14\": 9, \"15\": 7, \"16\": 0, \"17\": 0, \"19\": 2, \"20\": 9, \"21\": 9, \"22\":9, \"23\": 7, \"24\": 5, \"25\": 2, \"28\": 8, \"29\": 8, \"30\": 8, \"31\": 0, \"48\": 0, \"49\": 1, \"51\": 0, \"52\": 9, \"57\": 2, \"60\": 8, \"63\": 6, \"55\": 7, \"56\": 0, \"61\": 8, \"64\": 4, \"65\": 1, \"68\": 12, \"69\": 12, \"70\": 12, \"71\": 7, \"76\": 12, \"78\": 12, \"79\": 7, \"80\": 1, \"81\": 5, \"84\": 12, \"85\": 12, \"87\": 7, \"88\":3, \"92\": 8, \"93\": 8, \"94\": 8, \"95\": 0, \"96\": 1, \"97\": 0, \"100\": 12, \"102\": 12, \"103\": 7, \"112\": 6, \"113\": 5, \"115\": 0, \"116\": 12, \"117\": 12, \"118\": 12, \"119\": 7, \"120\": 0, \"121\": 0, \"124\": 11, \"125\": 11, \"126\": 11, \"127\": 14, \"129\": 0, \"131\": 0, \"133\": 9, \"135\": 7, \"145\": 2, \"147\": 2, \"151\":7, \"153\": 0, \"157\":8, \"159\": 5, \"192\": 2, \"193\": 5, \"195\": 0, \"196\": 12, \"197\": 12, \"199\": 10, \"204\": 12, \"205\": 12, \"207\": 10, \"208\":0, \"209\": 2, \"211\": 0, \"213\": 12, \"215\": 10, \"217\": 0, \"220\": 1, \"221\": 8, \"223\": 13, \"224\": 0, \"225\": 0, \"228\": 12, \"229\": 12, \"231\": 10, \"240\": 3, \"241\": 0, \"243\": 1, \"244\": 12, \"245\": 9, \"247\": 10, \"249\": 0, \"252\": 11, \"253\": 11 }\n\n\nexport function generateMap(width, height) {\n\n  const dungeon = generateDungeon(width, height);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const type = dungeon.get(x, y).type;\n      if (type === 'wall') {\n        const mask = dungeon.get8BitMask(x, y, 'wall', true);\n        const textureCode = parseInt(mask, 2) || 0;\n        if (typeof mapTiles[textureCode] === 'undefined') {\n          dungeon.tiles[x][y].texture = 'empty';\n        } else {\n        dungeon.tiles[x][y].texture = mapTiles[textureCode];\n        }\n        dungeon.tiles[x][y].orig = textureCode;\n      } else if (type === 'floor' || type === 'door') {\n        dungeon.tiles[x][y].texture = '15';\n      }\n      // convenience\n      dungeon.tiles[x][y].x = x;\n      dungeon.tiles[x][y].y = y;\n\n      // Seems these parameters are causing problems for redux dev tool (and cyclical datastructures aren't supposed to be used with redux)\n      delete dungeon.tiles[x][y].neighbours;\n      delete dungeon.tiles[x][y].nesw;\n    }\n  }\n\n  return dungeon;\n}\n\nexport function getSpawnFromRoom(room) {\n  return {\n    x: between(room.x, room.x + room.width),\n    y: between(room.y, room.y + room.height),\n  }\n}\n\nexport function getRandomSpawn(rooms) {\n  const roomCount = rooms.length;\n  return getSpawnFromRoom(rooms[random(roomCount)]);\n}\n\nexport function getMultipleSpawns(rooms, n) {\n  let spawns = new Map();\n  while (spawns.size < n) {\n    const spawn = getRandomSpawn(rooms);\n    spawns.set(`${spawn.x}x${spawn.y}`, spawn)\n  }\n  return [...spawns.values()];\n}\n","import dungeoneer from 'dungeoneer';\n\nexport default function generateDungeon(width, height) {\n  const dungeon = dungeoneer.build({\n    width,\n    height,\n  });\n  dungeon.width = width;\n  dungeon.height = height;\n\n  dungeon.get = function (x, y) {\n    if (x < 0 || x >= width) return false;\n    if (y < 0 || y >= height) return false;\n    return this.tiles[x][y];\n  }\n\n  dungeon.check = function (x, y, type, outOfBounds = false) {\n    if (!this.get(x, y) && outOfBounds) return true;\n    return (this.get(x, y) && this.get(x, y).type === type);\n  }\n\n  dungeon.get4BitMask = function (x, y, type, outOfBounds = false) {\n    let N = this.check(x, y - 1, type, outOfBounds);\n    let E = this.check(x + 1, y, type, outOfBounds);\n    let S = this.check(x, y + 1, type, outOfBounds);\n    let W = this.check(x - 1, y, type, outOfBounds);\n    return `${+N}${+E}${+S}${+W}`;\n  }\n\n  dungeon.get8BitMask = function (x, y, type, outOfBounds = false) {\n    let NW = this.check(x - 1, y - 1, type, outOfBounds);\n    let N = this.check(x, y - 1, type, outOfBounds);\n    let NE = this.check(x + 1, y - 1, type, outOfBounds);\n    let E = this.check(x + 1, y, type, outOfBounds);\n    let SE = this.check(x + 1, y + 1, type, outOfBounds);\n    let S = this.check(x, y + 1, type, outOfBounds);\n    let SW = this.check(x - 1, y + 1, type, outOfBounds);\n    let W = this.check(x - 1, y, type, outOfBounds);\n    return `${+NW}${+N}${+NE}${+E}${+SE}${+S}${+SW}${+W}`;\n  }\n\n  return dungeon;\n}\n","import Const from '../core/constants'\nimport { generateMap } from '../core/map'\n\nconst mapInitialState = generateMap(Const.WIDTH, Const.HEIGHT);\n\nexport const map = (state = mapInitialState, action) => {\n  switch (action.type) {\n    case 'RESET_DATA':\n      return generateMap(Const.WIDTH, Const.HEIGHT);\n    default:\n      return state\n  }\n}\n\nexport default map","const screenInitialState = {\n  top: 0,\n  left: 0,\n}\n\nexport const screen = (state = screenInitialState, action) => {\n  switch (action.type) {\n    case 'RESET_DATA':\n     return screenInitialState;\n    case 'SET_SCREEN_OFFSET':\n      return Object.assign(\n        {}, state, {\n          top: action.top,\n          left: action.left\n        }\n      )\n    default:\n      return state\n  }\n}\n\nexport default screen","const effectsInitialState = {\n  fogOn: true,\n  defeat: false,\n  victory: false,\n  blood: false,\n}\n\nexport const effects = (state = effectsInitialState, action) => {\n  switch (action.type) {\n    case 'RESET_DATA':\n      return effectsInitialState;\n    case 'TOGGLE_FOG':\n      return Object.assign({}, state, {\n        fogOn: !state.fogOn\n      });\n    case 'ATTACK_SPRITE':\n      return Object.assign({}, state, {\n        blood: true\n      });    \n    case 'SET_BLOOD':\n      return Object.assign({}, state, {\n        blood: state.value\n      });\n    case 'DEFEAT':\n      return Object.assign({}, state, {\n        defeat: true,\n      });\n    case 'VICTORY':\n      return Object.assign({}, state, {\n        victory: true,\n      });\n    default:\n      return state\n  }\n}\n\nexport default effects","import { weightedRange } from \"../core/utils\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst spriteInitialState = {};\n\nexport const sprite = (state = spriteInitialState, action) => {\n  switch (action.type) {\n    case \"SPAWN_SPRITE\":\n      const initialHealth = weightedRange(\n        100,\n        150 + 100 * action.level,\n        action.level\n      );\n      const initialPower = weightedRange(\n        40,\n        50 + 20 * action.level,\n        action.level\n      );\n      return {\n        id: uuidv4(),\n        power: initialPower,\n        health: initialHealth,\n        maxHealth: initialHealth,\n        level: action.level,\n        x: action.x,\n        y: action.y,\n        name: action.name,\n        experience: 0\n      };\n    case \"SET_SPRITE_POSITION\":\n      if (state.id !== action.id) {\n        return state;\n      }\n      return Object.assign({}, state, { x: action.x, y: action.y });\n    case \"SET_SPRITE_HEALTH\":\n      if (state.id !== action.id) {\n        return state;\n      }\n      return Object.assign({}, state, { health: action.health });\n    case \"SET_SPRITE_POWER\":\n      if (state.id !== action.id) {\n        return state;\n      }\n      return Object.assign({}, state, { power: action.power });\n    case \"ATTACK_SPRITE\":\n      if (state.id !== action.id) {\n        return state;\n      }\n      return Object.assign({}, state, { health: state.health - action.damage });\n    case \"ADD_EXPERIENCE\":\n      if (state.id !== action.id) {\n        return state;\n      }\n      const exp = state.experience;\n      const expGain = action.experience;\n      let newExp = exp + expGain;\n      let { level, power, health, maxHealth } = state;\n      let levelReq = 50 + level * 50;\n      console.log(\"adding exp:\", newExp);\n      while (newExp > levelReq) {\n        level += 1;\n        power *= 1.1;\n        health = Math.max(maxHealth, health);\n        newExp %= levelReq;\n        levelReq = 50 + level * 50;\n      }\n      return Object.assign({}, state, {\n        experience: newExp,\n        power: Math.round(power),\n        health,\n        level\n      });\n    default:\n      return state;\n  }\n};\n\nconst spritesInitialState = [];\nexport const sprites = (state = spritesInitialState, action) => {\n  switch (action.type) {\n    case \"RESET_DATA\":\n      return spritesInitialState;\n    case \"SPAWN_SPRITE\":\n      return [...state, sprite(undefined, action)];\n    case \"DESTROY_SPRITE\":\n      return [...state.filter(e => e.id !== action.id)];\n    case \"ATTACK_SPRITE\":\n      return state.map(e => sprite(e, action));\n    case \"SET_SPRITE_POSITION\":\n      return state.map(e => sprite(e, action));\n    case \"SET_SPRITE_HEALTH\":\n      return state.map(e => sprite(e, action));\n    case \"SET_SPRITE_POWER\":\n      return state.map(e => sprite(e, action));\n    case \"ADD_EXPERIENCE\":\n      return state.map(e => sprite(e, action));\n    default:\n      return state;\n  }\n};\n\nexport default sprites;\n","import { combineReducers } from 'redux'\nimport map from './map.js';\nimport screen from './screen.js';\nimport effects from './effects.js';\nimport sprites from './sprites.js';\n\nconst roguelikeApp = combineReducers({\n  sprites,\n  map,\n  screen,\n  effects,\n});\n\nexport default roguelikeApp;","import React from 'react';\nimport './Tile.css';\n\nexport const Tile = ({\n  texture,\n  orig,\n}) =>  {\n  return (\n    <td className={ `tile tile-${texture} ${orig}` } />\n  );\n}\n\nexport default Tile\n","import React from 'react';\nimport Tile from './Tile'\nimport './TileGrid.css';\n\nexport const TileGrid = ({\n  tiles\n}) => {\n  let rows = [];\n  let curRow = [];\n  for (let y = 0; y < tiles[0].length; y++) {\n    for (let x = 0; x < tiles.length; x++) {\n      curRow.push(<Tile \n                key={x} \n                {...tiles[x][y]}\n      />);  \n    }\n    rows.push(<tr key={y}>{curRow}</tr>);\n    curRow = [];\n  }\n  return (\n    <table>\n      <tbody>\n        { rows }\n      </tbody>\n    </table>\n  )\n}\n\nexport default TileGrid\n","import { connect } from 'react-redux';\nimport TileGrid from '../presenters/TileGrid.jsx';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    tiles: state.map.tiles,\n  }\n}\n\n\nexport default connect(mapStateToProps)(TileGrid);\n","export const resetData = () => ({\n  type: 'RESET_DATA',\n});\n\nexport const setSpritePosition = (id, x, y) => ({\n  type: 'SET_SPRITE_POSITION',\n  id,\n  x,\n  y,\n})\n\nexport const spawnSprite = (name, level, {x, y}) => ({\n  type: 'SPAWN_SPRITE',\n  name,\n  level,\n  x,\n  y,\n})\n\n\nexport const setScreenOffset = (top, left) => ({\n  type: 'SET_SCREEN_OFFSET',\n  top,\n  left,\n})\n\nexport const destroySprite = (id) => ({\n  type: 'DESTROY_SPRITE',\n  id,\n})\n\nexport const attackSprite = (id, damage) => ({\n  type: 'ATTACK_SPRITE',\n  id,\n  damage,\n})\n\nexport const setSpriteHealth = (id, health) => ({\n  type: 'SET_SPRITE_HEALTH',\n  id,\n  health,\n})\n\nexport const setSpritePower = (id, power) => ({\n  type: 'SET_SPRITE_POWER',\n  id,\n  power,\n})\n\nexport const toggleFog = () => ({\n  type: 'TOGGLE_FOG',\n})\n\nexport const setBlood = (value) => ({\n  type: 'SET_BLOOD',\n  value,\n})\n\nexport const defeat = () => ({\n  type: 'DEFEAT',\n})\n\nexport const victory = () => ({\n  type: 'VICTORY',\n})\n\nexport const addExperience = (id, experience) => ({\n  type: 'ADD_EXPERIENCE',\n  id,\n  experience,\n})","import React from 'react';\n\nconst Overlay = ({\n  zIndex,\n  style,\n  children,\n}) => {\n\n  const defaultStyle = {\n    position: 'fixed',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: zIndex,\n  }\n\n  const mergedStyle = Object.assign({}, defaultStyle, style);\n\n  return (\n    <div style={mergedStyle}>{children}</div>\n  );\n};\n\nexport default Overlay;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setBlood } from '../actions';\nimport Overlay from '../presenters/Overlay.jsx';\n\n\nconst Effects = (props, refs) => {\n\n  if (props.defeat) {\n    return (\n      <Overlay\n        zIndex={3}\n        style={{\n          backgroundColor: \"black\",\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <div style={{\n          color: 'white',\n          maxWidth: '50%',\n          textAlign: 'center',\n        }}>\n          <h3>DEFEAT</h3>\n          <h4>Press 'r' to try again</h4>\n        </div>\n      </Overlay>\n    )\n  }\n\n  if (props.victory) {\n    return (\n      <Overlay\n        zIndex={3}\n        style={{\n          backgroundColor: \"black\",\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n        <div style={{\n          color: 'white',\n          maxWidth: '50%',\n          textAlign: 'center',\n        }}>\n          <h3>VICTORY</h3>\n          <h4>Press 'r' to play again</h4>\n        </div>\n      </Overlay>\n    )\n  }\n\n  if (props.blood) {\n    setTimeout(\n      props.disableBlood.bind(this),\n      175\n    )\n    return (\n      <Overlay\n        zIndex={3}\n        style={{\n          backgroundImage: \"radial-gradient(circle farthest-corner at center, rgba(0,0,0,0) 0px, rgba(50,0,0,0.6) 40px, rgba(75,0,0,0.95) 80px, rgba(20,0,0,1) 120px, rgba(0,0,0,1) 100%)\"\n        }} />\n    );\n\n  }\n\n  if (props.fogOn) {\n    return (\n      <Overlay\n        zIndex={3}\n        style={{\n          transition: 'opacity 3s ease-in-out',\n          backgroundImage: \"radial-gradient(circle farthest-corner at center, rgba(0,0,0,0) 0px, rgba(0,0,0,0.6) 40px, rgba(0,0,0,0.95) 80px, rgba(0,0,0,1) 120px, rgba(0,0,0,1) 100%)\"\n        }} />\n    );\n  }\n\n  return null;\n};\n\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    ...state.effects,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    disableBlood: () => {\n      dispatch(setBlood(false))\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Effects);\n","import React from 'react';\nimport Const from '../core/constants'\nimport './Sprite.css';\n\nconst Sprite = ({\n  name,\n  level,\n  health,\n  maxHealth,\n  x,\n  y\n}) => {\n  const width = Const.UNIT_WIDTH;\n  const height = Const.UNIT_HEIGHT;\n  const style = {\n    position: 'absolute',\n    left: x * width,\n    top: y * height,\n    width: width,\n    height: height,\n    opacity: (0.3+health/maxHealth),\n  }\n\n  return (\n    <div\n      className={`sprite ${name}-${level}`}\n      style={style}>\n    </div>\n  );\n};\n\nexport default Sprite;","import React from 'react';\nimport Sprite from './Sprite';\n\nconst SpriteSet = ({\n  sprites\n}) => {\n\n  let spriteComponents = sprites.map((sprite, idx) => (\n    <Sprite\n      key={idx}\n      {...sprite} />\n  ));\n\n  return (\n    <div>\n      {spriteComponents}\n    </div>\n  );\n};\n\nexport default SpriteSet;\n\n","import { connect } from 'react-redux';\nimport SpriteSet from '../presenters/SpriteSet.jsx';\nimport Const from '../core/constants';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let sprites = state.sprites.filter(sprite =>\n    (sprite.health > 0) && (sprite.name === Const.ENEMY)\n  )\n\n  return {\n    sprites: sprites,\n  }\n}\n\n\nexport default connect(mapStateToProps)(SpriteSet);\n","import { connect } from 'react-redux';\nimport Sprite from '../presenters/Sprite.jsx';\nimport Const from '../core/constants';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let sprites = state.sprites.filter(sprite =>\n    (sprite.health > 0) && (sprite.name === Const.PLAYER)\n  )\n\n  return {\n    ...sprites[0],\n  }\n}\n\n\nexport default connect(mapStateToProps)(Sprite);\n","import { connect } from 'react-redux';\nimport SpriteSet from '../presenters/SpriteSet.jsx';\nimport Const from '../core/constants';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let sprites = state.sprites.filter(sprite =>\n    sprite.name === Const.HEALTH\n  )\n\n  return {\n    sprites: sprites,\n  }\n}\n\n\nexport default connect(mapStateToProps)(SpriteSet);\n","import { connect } from 'react-redux';\nimport SpriteSet from '../presenters/SpriteSet.jsx';\nimport Const from '../core/constants';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let sprites = state.sprites.filter(sprite =>\n    sprite.name === Const.WEAPON\n  )\n\n  return {\n    sprites: sprites,\n  }\n}\n\n\nexport default connect(mapStateToProps)(SpriteSet);\n","import React from 'react';\nimport './NavBar.css'\n\nconst NavBar = ({\n  level,\n  health,\n  power,\n}) => {\n  return (\n    <div className=\"NavBar\">\n      <div>{`Level: ${level || 0}`}</div> \n      <div>{`HP: ${health || 0}`}</div> \n      <div>{`Atk: ${power || 0}`}</div>\n    </div>\n  );\n};\n\nexport default NavBar;","import { connect } from 'react-redux';\nimport NavBar from '../presenters/NavBar.jsx';\nimport Const from '../core/constants';\n\nconst mapStateToProps = (state, ownProps) => {\n  let player = state.sprites.filter(sprite =>\n    (sprite.health > 0) && (sprite.name === Const.PLAYER)\n  )[0];\n  return {\n    ...player\n  }\n}\n\n\nexport default connect(mapStateToProps)(NavBar);\n","import { connect } from 'react-redux';\nimport SpriteSet from '../presenters/SpriteSet.jsx';\nimport Const from '../core/constants';\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let sprites = state.sprites.filter(sprite =>\n    (sprite.health > 0) && (sprite.name === Const.BOSS)\n  )\n\n  return {\n    sprites: sprites,\n  }\n}\n\n\nexport default connect(mapStateToProps)(SpriteSet);\n","export const detectSwipe = (el, callback) => {\n    // from: http://www.javascriptkit.com/javatutors/touchevents2.shtml\n    let touchsurface = el,\n    swipedir,\n    startX,\n    startY,\n    distX,\n    distY,\n    threshold = 30, //required min distance traveled to be considered swipe\n    restraint = 100, // maximum distance allowed at the same time in perpendicular direction\n    allowedTime = 300, // maximum time allowed to travel that distance\n    elapsedTime,\n    startTime,\n    handleswipe = callback || function(swipedir){}\n  \n    touchsurface.addEventListener('touchstart', function(e){\n        var touchobj = e.changedTouches[0]\n        swipedir = 'none'\n        startX = touchobj.pageX\n        startY = touchobj.pageY\n        startTime = new Date().getTime() // record time when finger first makes contact with surface\n        e.preventDefault()\n    }, false)\n  \n    touchsurface.addEventListener('touchmove', function(e){\n        e.preventDefault() // prevent scrolling when inside DIV\n    }, false)\n  \n    touchsurface.addEventListener('touchend', function(e){\n        var touchobj = e.changedTouches[0]\n        distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface\n        distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface\n        elapsedTime = new Date().getTime() - startTime // get time elapsed\n        if (elapsedTime <= allowedTime){ // first condition for awipe met\n            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met\n                swipedir = (distX < 0)? 'left' : 'right' // if dist traveled is negative, it indicates left swipe\n            }\n            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met\n                swipedir = (distY < 0)? 'up' : 'down' // if dist traveled is negative, it indicates up swipe\n            }\n        }\n        handleswipe(swipedir)\n        e.preventDefault()\n    }, false)\n}\n\nexport default detectSwipe;","import React, { Component } from 'react';\nimport Map from '../containers/Map';\nimport Effects from '../containers/Effects';\nimport Enemies from '../containers/Enemies';\nimport Player from '../containers/Player';\nimport HealthPacks from '../containers/HealthPacks';\nimport Weapons from '../containers/Weapons';\nimport StatsBar from '../containers/StatsBar';\nimport Boss from '../containers/Boss';\nimport Const from '../core/constants';\nimport detectSwipe from '../core/detectSwipe';\nclass Roguelike extends Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  centerOn(x, y) {\n    var w = window,\n      d = document,\n      e = d.documentElement,\n      g = d.getElementsByTagName('body')[0],\n      windowX = w.innerWidth || e.clientWidth || g.clientWidth,\n      windowY = w.innerHeight || e.clientHeight || g.clientHeight;\n\n    this.props.setScreen({\n      left: (windowX / 2 - x * Const.UNIT_WIDTH),\n      top: (windowY / 2 - y * Const.UNIT_HEIGHT),\n    })\n  }\n\n  centerOnPlayer() {\n    const {x, y} = this.props.player;\n    this.centerOn(\n      x,\n      y\n    );\n  }\n\n  resetGame() {\n    let {x, y} = this.props.resetGame();\n    this.centerOn(x, y);\n  }\n\n\n\n  battleEnemy(enemy) {\n    const { player } = this.props;\n\n    const playerHealth = player.health - enemy.power;\n    const enemyHealth = enemy.health - player.power;\n\n    if (enemyHealth <= 0) {\n      if (enemy.name === Const.BOSS) {\n        this.props.victory();\n      } else {\n        this.props.destroy(enemy.id)\n        this.props.addExperience(player.id, (enemy.maxHealth + enemy.power) / 2)\n      }\n      return;\n    }\n\n    if (playerHealth <= 0) {\n      return this.props.defeat();\n    }\n\n    this.props.attackSprite(\n      player.id,\n      enemy.power\n    )\n\n    this.props.attackSprite(\n      enemy.id,\n      player.power\n    )\n  }\n\n  // todo add different effects for different potions\n  // ideas: line of site, power, experience\n  usePotion(sprite) {\n    const { player } = this.props;\n    this.props.destroy(\n      sprite.id\n    )\n    this.props.healTo(\n      player.id,\n      player.health + sprite.health\n    )\n  }\n\n  upgradeWeapon(sprite) {\n    const {player } = this.props;\n    this.props.setPower(\n      player.id,\n      player.power + sprite.power\n    )\n    this.props.destroy(\n      sprite.id\n    )\n  }\n\n  handleSprites(coord) {\n    const { sprites } = this.props;\n    if (sprites.has(coord)) {\n      const sprite = sprites.get(coord);\n      switch (sprite.name) {\n        case Const.ENEMY:\n        case Const.BOSS:\n          this.battleEnemy(sprite);\n          break;\n        case Const.HEALTH:\n          this.usePotion(sprite);\n          break;\n        case Const.WEAPON:\n          this.upgradeWeapon(sprite)\n          break;\n        default:\n          return;\n      }\n    }\n  }\n\n  movePlayer(x, y) {\n    const coord = `${x}x${y}`;\n    const { tiles, sprites, player } = this.props;\n\n    if (sprites.has(coord)) {\n      return this.handleSprites(coord)\n    }\n\n    if (tiles[x][y].type !== 'wall') {\n      this.centerOn(x, y);\n      return this.props.moveSprite(player.id, x, y);\n    }\n  }\n\n  handleSwipe(direction) {\n    let {x, y} = this.props.player;\n    \n    switch (direction) {\n      case 'left':\n        x -= 1;\n        break\n      case 'right':\n        x += 1;\n        break;\n      case 'up':\n        y -= 1;\n        break;\n      case 'down':\n        y += 1;\n        break;\n      default:\n        return;\n    }\n    this.movePlayer(x, y);\n  }\n\n  handleKeyPress(e) {\n    const key = e.which;\n    if (key >= 37 && key <= 40) { e.preventDefault(); }\n    let {x, y} = this.props.player;\n    switch (key) {\n      case 82:\n        this.resetGame();\n        break;\n      case 87:\n      case 38:\n        y -= 1;\n        break;\n      case 83:\n      case 40:\n        y += 1;\n        break;\n      case 65:\n      case 37:\n        x -= 1;\n        break;\n      case 68:\n      case 39:\n        x += 1;\n        break;\n      case 72:\n        this.props.toggleFog();\n        break;\n      default:\n        return;\n    }\n    this.movePlayer(x, y);\n  }\n\n  componentWillMount() {\n    const {x, y} = this.props.setupGame(this.props.rooms);\n    this.centerOn(x, y);\n  }\n\n  componentDidMount() {\n    detectSwipe(window, this.handleSwipe.bind(this));\n    window.addEventListener(\"keydown\", this.handleKeyPress.bind(this));\n    window.onresize = this.centerOnPlayer.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <StatsBar />\n        <Effects />\n        <div\n          style={{\n            left: `${this.props.screen.left}px`,\n            top: `${this.props.screen.top}px`,\n            position: 'fixed'\n          }}>\n          <Map />\n          <Player />\n          <HealthPacks />\n          <Weapons />\n          <Boss />\n          <Enemies />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Roguelike;","import { generateMap, getRandomSpawn, getMultipleSpawns, getSpawnFromRoom} from './map.js';\n\nexport default {\n  generateMap,\n  getRandomSpawn,\n  getSpawnFromRoom,\n  getMultipleSpawns,\n};","import { connect } from 'react-redux';\nimport Roguelike from '../presenters/Roguelike.jsx';\nimport Game from '../core';\nimport Const from '../core/constants';\nimport {\n  defeat,\n  victory,\n  spawnSprite,\n  destroySprite,\n  attackSprite,\n  setSpritePosition,\n  setSpriteHealth,\n  setSpritePower,\n  addExperience,\n  setScreenOffset,\n  resetData,\n  toggleFog\n} from '../actions';\n\nconst mapStateToProps = (state, ownProps) => {\n\n  const sprites = new Map();\n  const player = state.sprites.filter(sprite => sprite.name === Const.PLAYER)[0];\n  state.sprites.forEach(sprite => {\n    sprites.set(`${sprite.x}x${sprite.y}`, sprite)\n  })\n\n\n  return {\n    tiles: state.map.tiles,\n    rooms: state.map.rooms,\n    screen: state.screen,\n    sprites: sprites,\n    player: player,\n    game: state.game,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n\n  const spawnSprites = (type, maxLevel, count, spawns) => {\n    for (let i = 0; i < count; i++) {\n      let level = i % maxLevel + 1;\n      dispatch(spawnSprite(\n        type, level, spawns.pop()\n      ));\n    }\n  }\n\n  const setupGame = (dispatch, getState) => {\n    const { rooms } = getState().map;\n    const playerSpawn = Game.getSpawnFromRoom(rooms[0]);\n    const spawns = Game.getMultipleSpawns(rooms.slice(1), 100);\n\n    spawnSprites(Const.ENEMY, Const.ENEMY_LEVELS, Const.ENEMY_COUNT, spawns, dispatch);\n    spawnSprites(Const.HEALTH, Const.HEALTH_LEVELS, Const.HEALTH_COUNT, spawns, dispatch);\n    spawnSprites(Const.WEAPON, Const.WEAPON_LEVELS, Const.WEAPON_COUNT, spawns, dispatch);\n\n    dispatch(spawnSprite(Const.BOSS, Const.BOSS_LEVELS, spawns.pop()));\n    dispatch(spawnSprite(Const.PLAYER, 1, playerSpawn));\n\n    return playerSpawn;\n  }\n\n  return {\n    destroy: (id) => {\n      dispatch(destroySprite(id));\n    },\n\n    healTo: (id, health) => {\n      dispatch(setSpriteHealth(id, health));\n    },\n\n    attackSprite: (id, damage) => {\n      dispatch(attackSprite(id, damage));\n    },\n\n    setPower: (id, power) => {\n      dispatch(setSpritePower(id, power));\n    },\n\n    setScreen: ({top, left}) => {\n      dispatch(setScreenOffset(top, left));\n    },\n\n    moveSprite: (id, x, y) => {\n      dispatch(setSpritePosition(id, x, y));\n    },\n\n    toggleFog: () => {\n      dispatch(toggleFog());\n    },\n\n    setupGame: () => {\n      return dispatch(setupGame)\n    },\n\n    defeat: () => {\n      dispatch(defeat());\n    },\n\n    victory: () => {\n      dispatch(victory());\n    },\n\n    resetGame: () => {\n      dispatch(resetData());\n      return dispatch(setupGame)\n    },\n\n    addExperience: (id, experience) => {\n      dispatch(addExperience(id, experience));\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Roguelike);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\nimport thunk from 'redux-thunk';\nimport roguelikeApp from './reducers';\nimport Game from './containers/Game';\nimport './index.css';\n\n\nlet store = createStore(\n  roguelikeApp,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store} >\n    <Game />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}